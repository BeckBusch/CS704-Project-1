import buffer.Buffer;

CD(
	input String signal incomingOrder; // used to receive orders from the gui
	output String signal outgoingOrder, returnMSG; // used to send orders to the ABS, and respond to the GUI
	input signal absReady, absFault; // used to coordinate with the ABS
	
)->{
	signal orderBufferSignal; // used to coordinate the ready state of the buffer between reactions
	String signal addToBuffer, bufferOutput; // used to send and retrive values with the buffer
	signal removeFromBuffer; // used to request a value from the buffer

	{// First reaction - Receiving values from the GUI
		String wholeInputString; // Storage value for the incoming order
		
		await(orderBufferSignal); // wait for buffer to be init
		
		while(true) {
			await(incomingOrder); // Wait for an order to appear then stop sustaining
			await(!incomingOrder);

			wholeInputString = #incomingOrder; // Read incoming order into String
			emit addToBuffer(wholeInputString); // request order be added to buffer

			emit returnMSG("Order Received"); // return a response to the GUI
		}
	}
	||
	{// Second Readtion - Order Sender
		String sendingString;
		
		await(orderBufferSignal); // wait for buffer to be init
		
		while(true) { // repeat loop
			abort(absFault) { // exit on abs ERROR, incase one occurs while waiting on the buffer
				await(absReady); // Wait for ABS to enter ready state, and assume it will stay like this forever
				
				trap(R) { // Begin waiting for the buffer to have contents
					loop { // repeat the loop
						emit removeFromBuffer; // request value from buffer
						await(bufferOutput); // await the value from buffer
						sendingString = #bufferOutput; // store the returned value
						
						if (!(sendingString.isEmpty())) { // if the value returned from the buffer is not blank
							exit(R); // Exit the loop to SENT IT
						}
						await(addToBuffer); // if the buffer has no contents, wait for the global buffer signal to be updates
						// this cuts down on unnessacary reads and writes of the global buffer signal
					}
				}
			// SEND IT!
			// This code is inside the abort to ensure that a fault returns the code to the absReady at the start of the loop
				// however a clash condition is created where is a fault arises during the manipluation of the buffer, 
				// the buffer will become corrupted
			
			emit outgoingOrder(sendingString); // send the order to the ABS
			
			emit returnMSG("Order Procesing"); // return a response to the GUI

			pause; // wait before continuing so we dont react to our own buffer update
			}
		}
	}
	||
	{ // Third Reaction - Buffer Manager
		String inputHolder, outputHolder; // storage values for the orders
		Buffer orderBuffer = new Buffer(128); // declare the storage buffer
		
		emit returnMSG("POS Sub-System Ready"); // inform the GUI that the subsystem is ready

		emit orderBufferSignal; // declare buffer ready
		
		loop { // loop forever
			present(addToBuffer) { // if a value addition has been requested
				inputHolder = #addToBuffer; // retrive the value
				orderBuffer.push(inputHolder); // add to back of buffer
			}

			present(removeFromBuffer) { // if a value removal has been requested
				if (orderBuffer.isEmpty()) { // check if the buffer is empty
					outputHolder = ""; // if so, ready a blank string
					emit bufferOutput(outputHolder); // then return the blank string
				} else { // if buffer not empty
					outputHolder = (String) orderBuffer.pop(); // take value from top of buffer
					emit bufferOutput(outputHolder); // return the value
				}
			}
			
			pause; // wait for a tick boundary to avoid unbounded loop and properly sync with other reactions
		}
	}	
}

