reaction ConveyorControl(: input signal bottleAtPos1, input signal bottleLeftPos5, output signal motConveyorOnOff){
	// initialize state machine
	System.out.println("Initializing state machine for conveyor controller.");
	
	int state = 1;
	
	while (true) {
		// inputs
		int dataBottleAtPos1 = 0;
		int dataBottleLeftPos5 = 0;
		
		// outputs
		int dataMotConveyorOnOff = 0;
		
		// check inputs
		present(bottleAtPos1){
			dataBottleAtPos1 = 1;
		}
		
		present(bottleLeftPos5){
			dataBottleLeftPos5 = 1;
		}
		
		// state logic
		System.out.printf("Entered state %d\n", state);
		
		switch (state) {
		case 1:
			dataMotConveyorOnOff = 0;
			
			System.out.print("waiting for bottle to leave pos 5 entrance.\n");
			await(!bottleLeftPos5);
						
			if (dataBottleLeftPos5 == 0) {
				state = 2;
			}
			
			break;
			
		case 2:
			dataMotConveyorOnOff = 1;
			
			abort(bottleAtPos1 || bottleLeftPos5){
				sustain motConveyorOnOff;
			}
			
			if (dataBottleLeftPos5 == 1 && dataBottleAtPos1 == 0) {
				state = 3;
			}
			
			else if (dataBottleLeftPos5 == 0 && dataBottleAtPos1 == 1) {
				state = 4;
			}
			
			else if (dataBottleLeftPos5 == 1 && dataBottleAtPos1 == 1) {
				state = 1;
			}
			
			break;
			
		case 3:
			dataMotConveyorOnOff = 1;
			
			abort(bottleAtPos1){
				sustain motConveyorOnOff;
			}
			
			if (dataBottleAtPos1 == 1) {
				state = 1;
			}
			
			break;
			
		case 4:
			dataMotConveyorOnOff = 1;

			abort(bottleLeftPos5){
				sustain motConveyorOnOff;
			}
			
			if (dataBottleLeftPos5 == 1) {
				state = 1;
			}
			
			break;
			
		default:
			break;
		}
		
		pause;
		
	}
}

ConveyorCD(..)->ConveyorControl
